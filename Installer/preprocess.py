import re
import os.path
from base64 import b64encode

"""
Preprocess.py - This file makes the installer files into one file that is portable
This file is part of Snapify.
"""

SAVED_FILE_NAME = './snapify.php'
SAVED_PLUGIN_INSTALLER_PATH = '../plugin/includes/installer/snapify.php'
SNAPIFY_TEMPLATE = './snapify_template.php'
IMAGE_FILE_TYPE = ['gif']
IMAGE_SRC_PREFIX_FORMAT = 'data:image/%s;base64,'
FILES_TO_FETCH = ['snapify_style.css', 'jquery-3.1.1.min.js', 'ring.gif']
GENERATION_COMMENT = '''
/*******************************************************************************
* This file was automatically generated by the Snapify Installer (preprocess.py),
* and is used only as an installer to restore your wordpress site.
* For more information about this file please see the docs - `The Installer File`
*******************************************************************************/
'''
DEVELOPMENT_MODE = False

def read_file(path):
  handle = open(path, 'rb')
  data = handle.read()
  handle.close()
  return data

def write_file(path, data):
  handle = open(path, 'wb')
  handle.write(data)
  handle.close()

def fetch_file(data, path):
  if not os.path.isfile(path):
    raise 'File not found! (%s)' %path
  return data.replace('{%' + path + '%}', read_file(path))

def fetch_image(data, path):
  if not os.path.isfile(path):
    raise 'Image not found! (%s)' %path
  img_data = b64encode(read_file(path))
  img_type = IMAGE_SRC_PREFIX_FORMAT %get_file_type(path)
  return data.replace('{%' + path + '%}', img_type + img_data)

def get_required_file(path):
  return read_file(path).replace("<?php", "").replace("?>", "");

def fetch_required_files(snapify_data):
  required_files = re.findall("require '(.*?)';", snapify_data)
  for i in required_files:
    snapify_data = snapify_data.replace("require '" + i + "';", get_required_file(i))
  return snapify_data

def php_strip_whitespace(data):
  pattern = re.compile(r'(^|^[\t\s]+)\/\/.*?\n', re.MULTILINE)
  data = re.sub(pattern, '', data)
  data = data.replace(";\n", ";").replace("{\n", "{")
  data = data.replace(";\r\n", ";").replace("{\r\n", "{")
  data = data.replace("        ", "").replace("    ", "").replace("\t", "")

  return data

def add_generation_comment(data):
  return data.replace("<?php", "<?php " + GENERATION_COMMENT)


def get_file_type(path):
  return path[path.rfind('.') + 1:]

def main():
  print 'Merging files..'

  snapify_file_data = read_file(SNAPIFY_TEMPLATE)
  for path in FILES_TO_FETCH:
    if get_file_type(path) in IMAGE_FILE_TYPE:
      snapify_file_data = fetch_image(snapify_file_data, path)
    else:
      snapify_file_data = fetch_file(snapify_file_data, path)

  snapify_file_data = fetch_required_files(snapify_file_data)
  
  if not DEVELOPMENT_MODE:
    snapify_file_data = php_strip_whitespace(snapify_file_data)

  snapify_file_data = add_generation_comment(snapify_file_data)

  write_file(SAVED_FILE_NAME, snapify_file_data)
  write_file(SAVED_PLUGIN_INSTALLER_PATH, snapify_file_data)
  print 'Done!'


if "__main__" == __name__:
  main()
